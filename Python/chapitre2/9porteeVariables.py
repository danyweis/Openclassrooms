# -*-coding:utf-8 -*

# ==> !!! ATTENTION !!! <==
maListe1 = [1, 2, 3]
maListe2 = maListe1
maListe2.append(4)
print(maListe2) # RENVOIE [1, 2, 3, 4]
print(maListe1) # RENVOIE [1, 2, 3, 4]
# ILS RENVOIENT LA MEME VALEURS PARCE QUE ILS ONT LA MEME REFERENCE
# POUR EVITER CELA :

maListe3 = [1, 2, 3]
maListe4 = list(maListe3) # CELA REVIENT A COPIER LE CONTENU DE maListe3
maListe4.append(4)
print(maListe3) # RENVOIE [1, 2, 3]
print(maListe4) # RENVOIE [1, 2, 3, 4]

# DANS LA LIGNE 13 NOUS AVONS DEMANDER A PYTHON DE CREER UN NOUVEL OBJET
# DU COUP LES LISTES N'ONT PLUS LA MEME REFERANCE

# ==> LA MEME CHOSE EST POSSIBLE AVEC LES DICTIONNAIRES EN UTILISANT "dict()" AU LIEU DE "list()"

# IL FAUT FAIRE AVEC LES REFERANCES EN LES COMPARON

listeUne = [1, 2]
listeDeux = [1, 2]
listeUne == listeDeux # RETOURNE True "ON COMPARE LE CONTENU DES LISTES"
listeUne is listeDeux # RETOURNE False "ON COMPARE LEUR REFERANCE"

# TRAVAILER AVEC DES FONCTIONS EST DES VARIABLES GLOBAL ET LOCALE

i = 4 # UNE VARIABLE , NOMMEE i, CONTENANT UN ENTIER
def incI():
    """FONCTION CHARGER D'INCREMENTER i DE 1"""
    global i # PYTHON RECHERCHE i EN DEHORS DE L'ESPACE LOCAL DE LA FONCTION
    i += 1
print(i) # RETOURNE  =>  4

incI()
print(i) # RETOURNE  =>  5

# ON NE PAS PRECISANT QUE i DOIT ETRE CONCIDEREE COMME GLOBAL ON NE PEUT PAS REELEMENT MODIFIER SA VALEUR
